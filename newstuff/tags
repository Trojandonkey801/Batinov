!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Admin	Credential.java	/^	private boolean Admin;$/;"	f	class:Credential	file:
Credential	Credential.java	/^	public Credential(boolean isAdmin,String userName){$/;"	m	class:Credential
Credential	Credential.java	/^public class Credential{$/;"	c
Student	Student.java	/^	public Student(int port,String host, String userName){$/;"	m	class:Student
Student	Student.java	/^public class Student extends user{$/;"	c
addUser	newserver.java	/^	private void addUser(String userName,boolean isAdmin){$/;"	m	class:newserver	file:
allCred	newserver.java	/^	private ArrayList<Credential> allCred = new ArrayList<Credential>();$/;"	f	class:newserver	file:
allCred	server.java	/^	private ArrayList<Credential> allCred = new ArrayList<Credential>();$/;"	f	class:server	file:
answerForum	user.java	/^	abstract void answerForum();$/;"	m	class:user
client	client.java	/^	public client(int port,String host,String userName){$/;"	m	class:client
client	client.java	/^public class client{$/;"	c
close	client.java	/^	public void close()throws IOException{$/;"	m	class:client
count	newserver.java	/^	private static int count = 0;$/;"	f	class:newserver	file:
csocket	newserver.java	/^	Socket csocket;$/;"	f	class:newserver
getAdmin	Credential.java	/^	public boolean getAdmin(){$/;"	m	class:Credential
getFile	user.java	/^	abstract void getFile();$/;"	m	class:user
getForum	user.java	/^	abstract void getForum();$/;"	m	class:user
getName	Credential.java	/^	public String getName(){$/;"	m	class:Credential
getToken	Credential.java	/^	public int getToken(){$/;"	m	class:Credential
getToken	client.java	/^	public String getToken()throws IOException{$/;"	m	class:client
handleConnection	newserver.java	/^	private void handleConnection(Socket s) throws IOException$/;"	m	class:newserver	file:
handleConnection	server.java	/^	private void handleConnection(Socket s) throws IOException$/;"	m	class:server	file:
handleExist	newserver.java	/^	private int handleExist(String S){$/;"	m	class:newserver	file:
main	client.java	/^	public static void main(String[] args)throws IOException ,InterruptedException{$/;"	m	class:client
main	newserver.java	/^	public static void main(String args[]) throws Exception {$/;"	m	class:newserver
main	server.java	/^	public static void main(String args[]) throws Exception {$/;"	m	class:server
map	newserver.java	/^	private static HashMap<Thread,Integer> map;$/;"	f	class:newserver	file:
newserver	newserver.java	/^	public newserver(Socket csocket) {$/;"	m	class:newserver
newserver	newserver.java	/^public class newserver implements Runnable {$/;"	c
rand	Credential.java	/^	private Random rand = new Random();$/;"	f	class:Credential	file:
rand	newserver.java	/^	Random rand = new Random();$/;"	f	class:newserver
run	newserver.java	/^	public void run() {$/;"	m	class:newserver
run	server.java	/^	public void run(){$/;"	m	class:server
s	client.java	/^	private Socket s;$/;"	f	class:client	file:
saveFile	client.java	/^	private void saveFile(Socket clientSock,int token) throws IOException {$/;"	m	class:client	file:
saveFile	newserver.java	/^	private void saveFile(Socket clientSock) throws IOException {$/;"	m	class:newserver	file:
saveFile	server.java	/^	private void saveFile(Socket clientSocket) throws IOException{$/;"	m	class:server	file:
sendFile	client.java	/^	 public void sendFile(String file) throws IOException {$/;"	m	class:client
sendFile	user.java	/^	abstract void sendFile();$/;"	m	class:user
sendMessage	client.java	/^	private void sendMessage(String token)throws IOException,InterruptedException{$/;"	m	class:client	file:
server	server.java	/^	public server(int port){$/;"	m	class:server
server	server.java	/^public class server extends Thread{$/;"	c
ss	server.java	/^	private ServerSocket ss;$/;"	f	class:server	file:
token	Credential.java	/^	private int token;$/;"	f	class:Credential	file:
token	user.java	/^	private String token;$/;"	f	class:user	file:
tokens	newserver.java	/^	private ArrayList<String> tokens = new ArrayList<String>();$/;"	f	class:newserver	file:
tokens	server.java	/^	private ArrayList<String> tokens = new ArrayList<String>();$/;"	f	class:server	file:
user	user.java	/^	public user(int port, String host, String userName)throws IOException{$/;"	m	class:user
user	user.java	/^public abstract class user extends client{$/;"	c
userName	Credential.java	/^	private String userName;$/;"	f	class:Credential	file:
userName	client.java	/^	String userName;$/;"	f	class:client
